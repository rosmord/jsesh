<?xml version="1.0" encoding="UTF-8"?>
	<!--
		Auxiliary file containing JSesh specific build rules. 2009/02/01 : The
		current builing system is a mess. We do generate quite a number of
		files, some before, and some after java compilation. The best way to
		proceed would be to modularize the whole project (for instance moving
		to maven). We do use both eclipse and netbeans for creating JSesh
		(eclipse still being more responsive on code processing, IMHO, and
		netbeans being really good for building interfaces) We started
		including our netbeans nbproject in JSesh sources, but we recently had
		problems while moving to another machine. So we decided we should not
		include a nbproject. Which is annoying, as we want to add some JSesh
		components to the netbean palette while working on JSesh. And netbeans
		refuses to do this for "ant projects". So, we will work like this: we
		have all common ant tasks in this file if you are using netbeans, let
		it create the ant build.xml, and then include this file in it. if you
		are using eclipse, use "build-eclipse.xml" S. Rosmorduc, with
		modifications by W. Collins. Futher modifications to get a "true"
		netbean project. The new architecture has two purposes : a) the
		previous one was too dependent on my (S. Rosmorduc) installation b) to
		ease CVS administration, and in general to clean up things, we try to
		have a distribution where cleanup means "deleting whole directories".

		The resources/skeleton directory contains most files which will be
		copied in these essentially empty directories. Project architecture :
		installer-distribution : where the files supposed to be distributed
		over the internet will go. dist: a directory which will contain the
		jar libs, used by the lib : third party java libraries used by the
		project. resources : configuration, resources and template files. src
		: java source files. utilitySource : various utility files, not part
		of the final project. IMPORTANT NOTICE : the current "official" JVM
		for JSesh is 1.5.
		IMPORTANT : To
		customise this file, change the properties in
		resources/builder/local.prop Note for programmers: I now use both
		netbean (mainly for matisse) and eclipse (which I prefer for "pure"
		java). I had to change my project architecture to get a "normal"
		netbean projet, so some things have moved.
	-->
	<!-- You may freely edit this file. See commented blocks below for -->
	<!-- some examples of how to customize the build. -->
	<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="JSesh" default="jsesh-jar" basedir=".">
	<description>Builds, tests, and runs the project JSesh.
		JSesh is a library for manipulating ancient egyptian texts.
		The first goal is to provide a portable editor for the manuel de codage.
		Then, new encodings will be added (as M.-J. Nederhof's RES).

		tksesh-like capabilities are also a project.
    </description>

	<!--
		COMMENTS ABOUT JSESH. For various reasons, such as software licences,
		a number of libraries used by JSesh are not distributed with it. These
		libraries are not part of the finished product, but they are used to
		build the installer (so you can perfectly build a functionnal JSesh
		system without them). The installer itself is IzPack, which can be
		downloaded at http://www.izforge.com/izpack/ For building a mac-aware
		installation, we use "jarbundler", which is under the GPL Note that
		all libraries used in JSesh will be available in source form on the
		JSesh site
		(http://jsesh.qenherkhopeshef.org/download/thirdPartyLibraries/) If
		you want to build the installer, change the values of IZPACK and
		JARBUNDLER in resources/builder/local.prop
	-->


	<!--
		property file holding local data (installation directory, external
		libraries...
	-->
	<property file="${basedir}/local.prop" />

	<property name="ant.build.javac.target" value="1.5"/> 

	<!-- place holding the version number -->
	<property name="versionFile" value="${basedir}/version.prop"></property>

	<!-- read the version number -->
	<property file="${versionFile}" />

	<!-- places where we put files generated by JLex and Cups -->

	<property name="mdclexer" value="${basedir}/src/jsesh/mdc/lex" />

	<property name="mdcparser" value="${basedir}/src/jsesh/mdc/parser" />

	<!-- destination directory for JSesh classes -->

	<property name="JSESHCLASSES" value="${basedir}/build/classes" />

	<!-- source directory for documentation -->
	<property name="docdir" value="${basedir}/resources/userdoc" />

	<!-- destination directory for html documentation -->

	<property name="htmlDoc" value="${basedir}/dist/jseshResources/userdoc" />

	<!-- source directory for grammars -->

	<property name="GRAMMARS" value="${basedir}/resources/grammars" />


	<!-- END OF PROPERTIES -->

	<!-- How to generate the documentation -->
	
	<!--
	    BOGUS ??? WITH THE LAST APPLE RELEASE OF JAVA ?????	-->
	<import file="resources/builder/buildDocumentation.xml" />


	<!--
		libraries used to *build* JSesh (and not needed afterwards)
	-->

	<path id="utilLib" path="./utilityLib">
	</path>

	<path id="externalLibs">
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="extLib">
			<include name="cupruntime.jar" />
		</fileset>
	</path>

	<!-- filter for inserting the version number in files -->
	<filterset id="versionfilter">
		<filtersfile file="resources/builder/version.prop" />
	</filterset>

	<target name="prepare-jsesh-compilation">
		<description>
			Prepare for JSesh compilation. Create the framework, and test files dates.
		</description>
		<!-- Create the basic directories if they don't exist yet -->
		<mkdir dir="build/classes" />
		<mkdir dir="installer-distribution" />
		<mkdir dir="reports" />
		<mkdir dir="utilityLib" />
		<mkdir dir="extLib" />
		<!-- check files dates -->
		<uptodate property="cupsAndLexAvailable" targetfile="extLib/cupruntime.jar">
			<srcfiles dir="utilitySource/JLex" includes="Main.java" />
		</uptodate>
		<uptodate property="mdcparserok" targetfile="${mdcparser}/MDCParse.java">
			<srcfiles dir="${GRAMMARS}" includes="MDCParse.y" />
		</uptodate>
		<uptodate property="mdclexok" targetfile="${mdclexer}/MDCLexAux.java">
			<srcfiles dir="${GRAMMARS}" includes="MDCLexAux.l" />
		</uptodate>
	</target>

	<target name="-generate-needed-files" depends="-version,-doLex,-doCup">
	</target>

	<!-- Builder softwares used to generate files -->

	<target name="-doLex" depends="-buildUtilities" unless="mdclexok">
		<description>
			Generate a lexical analyser for the manuel de codage.
			The generated java files must then be copied and renamed.
        </description>
		<java classname="JLex.Main" fork="true" dir="${GRAMMARS}"
			classpathref="utilLib">
			<arg value="MDCLexAux.l" />
		</java>
		<move todir="${mdclexer}">
			<fileset dir="${GRAMMARS}" />
			<mapper type="glob" from="*.l.java" to="*.java" />
		</move>
	</target>

	<target name="-doCup" depends="-buildUtilities" unless="mdcparserok">
		<description>
			generate a syntactical parser for the manuel de codage.
        </description>
		<java dir="${GRAMMARS}" classname="java_cup.Main" fork="true"
			classpath="${basedir}/lib" classpathref="utilLib" output="reports/cupReport.txt">
			<arg value="-package" />
			<arg value="jsesh.mdc.parser" />
			<arg value="-dump" />
			<arg value="-interface" />
			<arg value="-parser" />
			<arg value="MDCParse" />
			<arg value="-symbols" />
			<arg value="MDCSymbols" />
			<arg value="MDCParse.y" />
		</java>
		<!--
			move the generated files where they belong, and correct a few things
			about packages
		-->
		<move file="${GRAMMARS}/MDCParse.java" todir="${mdcparser}" />
		<replace file="${GRAMMARS}/MDCSymbols.java" token="package jsesh.mdc.parser;"
			value="package jsesh.mdc.lex;" />
		<move file="${GRAMMARS}/MDCSymbols.java" todir="${mdclexer}" />
	</target>

	<target name="-version">
		<description>
			Put some configuration items in place and automatically update the
			version number in each file
        </description>
		<echo message="Copying version number" />
		<echo message="Copying Version.java" />
		<copy file="resources/templates/Version.java" todir="src/jsesh"
			overwrite="true">
			<filterset refid="versionfilter" />
		</copy>
		<copy file="resources/templates/LisezMoiCD.html" todir="dist"
			overwrite="true">
			<filterset refid="versionfilter" />
		</copy>
	</target>

	<target name="-buildUtilities" unless="cupsAndLexAvailable">
		<description>
			Compile the Source for any utility programs which we rely on
			Do this if you get a java.lang.UnsupportedClassVersionError from
			JLex or Cup when you switch development platforms, in particular
			switching from Linux to Windows 2000 seems to be problematic.
			Rebuilding the utilities is fast and gets rid of the problem.

			Later note : Messages like java.lang.UnsupportedClassVersionError
			might be due to a clash between different jvm : classes compiled
			with java 1.6 and re-read by java 1.4. This is solved by the
			source="1.5" attribute.
        </description>
		<echo message="Rebuilding JLex" />
		<delete failonerror="false">
			<fileset dir="utilityLib/JLex" includes="*.class" />
		</delete>
		<javac description="Rebuild Utilities" destdir="utilityLib"
			source="1.5" includes="Main.java" debug="true" deprecation="true"
			srcdir="utilitySource/JLex" />

		<echo message="Rebuilding CUP" />
		<delete failonerror="false">
			<fileset dir="utilityLib/java_cup" includes="*.class" />
			<fileset dir="utilityLib/java_cup/runtime" includes="*.class" />
		</delete>
		<javac description="Rebuild JCup" destdir="utilityLib" debug="true"
			deprecation="true" srcdir="utilitySource/java_cup" includes="*.java,runtime/*.java"
			source="1.5" />
		<echo message="building cup runtime library" />
		<jar destfile="extLib/cupruntime.jar" basedir="utilityLib">
			<include name="java_cup/runtime/" />
		</jar>
	</target>

	<target name="updateGlyphsAndTextResources" description="-->update glyphs and texts libraries">
		<description>
			Import a number of data files into the JSesh project.
			The
			author (S. Rosmorduc) is normally the only one who does this.
		</description>
		<sync todir="${basedir}/resources/texts" verbose="true">
			<fileset dir="/Users/rosmord/Documents/MesDocuments/HieroFinal/inBase">
			</fileset>
		</sync>
		<!-- Ugly code, but I won't get an ant extension just to solve it. -->
		<sync verbose="yes" todir="${basedir}/resources/glyphs/varia">
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/A">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/B">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/C">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/D">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/E">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/F">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/G">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/H">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/I">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/K">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/L">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/M">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/N">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/O">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/P">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/Q">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>

			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/R">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>

			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/S">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/T">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/U">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/V">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/W">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/X">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>

			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/Y">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/Z">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/Aa">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
			<fileset
				dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/SThomasDetail/ManuelDeCodage/Ff">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
		</sync>
		<copy todir="${basedir}/resources/glyphs/varia" overwrite="true">
			<fileset dir="/Users/rosmord/Documents/MesDocuments/Egypto/Gsigns/Distribution">
				<include name="*.svg" />
				<include name="*.SVG" />
			</fileset>
		</copy>
	</target>

	<!--
		- - - - - - - - - - - - - - - - - target: -jsesh-init - - - - - - - -
		- - - - - - - - -
	-->
	<target name="-jsesh-init" depends="prepare-jsesh-compilation,-generate-needed-files">
	</target>

	<!--
		- - - - - - - - - - - - - - - - - target: jsesh-compile - - - - - - -
		- - - - - - - - - -
	-->
	<target name="jsesh-compile" depends="-jsesh-init">
		<copy todir="${JSESHCLASSES}">
			<fileset dir="resources/skeleton/build/classes">
			</fileset>
		</copy>
		<copy todir="${JSESHCLASSES}">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<depend srcdir="src:mac_src" destdir="${JSESHCLASSES}" cache="depcache"
			closure="yes" />
		<javac srcdir="src" fork="true" debug="true" deprecation="true"
			compiler="modern" source="1.5" encoding="ISO8859-1" destdir="${JSESHCLASSES}"
			verbose="false" classpath="${JSESHCLASSES}" classpathref="externalLibs"
			excludes="**/fonteditor/*,**/transducer/**" />
	</target>



	<target name="jsesh-jar" depends="jsesh-compile" description="--> Compile JSesh code">
		<description>
			Build the distributable executable for JSesh.
			TODO:
			separate this in two : jsesh library and jsesh application.
		</description>
		<!-- compute the manifest classpath -->
		<path id="jarpath">
			<fileset dir="lib">
				<include name="*.jar" />
			</fileset>
			<pathelement location="jseshGlyphs.jar" />
			<pathelement location="jseshHtmlDoc.jar" />
		</path>
		<pathconvert property="manifest.classpath" pathsep=" ">
			<path refid="jarpath" />
			<flattenmapper />
		</pathconvert>

		<!-- build the jar -->
		<jar jarfile="dist/jsesh.jar" excludes="**/CVS/**">
			<manifest>
				<attribute name="Main-Class"
					value="jsesh.mdcDisplayer.swing.application.MDCDisplayerAppli" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>
			<fileset dir="utilityLib">
				<include name="java_cup/runtime/" />
			</fileset>
			<fileset dir="${JSESHCLASSES}">
			</fileset>
		</jar>
	</target>

	<target name="rtfCleaner" depends="jsesh-compile"
		description="--> RTF Cleanup for use when inserting word documents in InDesign.">
		<!-- compute the manifest classpath -->
		<path id="rtfManifest">
			<fileset dir="lib">
				<include name="swing-layout*.jar" />
			</fileset>
		</path>

		<!-- build the jar -->
		<jar jarfile="dist/rtfCleaner.jar" excludes="**/CVS/**">
			<manifest>
				<attribute name="Main-Class" value="jsesh.softwares.rtfCleaner.JRTFCleaner" />
			</manifest>
			<fileset dir="${JSESHCLASSES}">
				<include name="**/rtfCleaner/*" />
			</fileset>
			<!--
				why on earth have i included this in rtfCleaner.jar ???
				<zipgroupfileset dir="lib"> <exclude name="libquaqua.jnilib"/>
				</zipgroupfileset>
			-->
			<zipgroupfileset dir="lib">
				<include name="swing-layout-1.0.3.jar" />
			</zipgroupfileset>
		</jar>
	</target>

	<!--
		================================= target: mac-jar
		=================================
	-->

	<target name="mac-jar" depends="jsesh-jar" description="--> mac-specific jar"
		if="HAVE_MAC_LIB">
		<echo>Compiling mac specific classes</echo>
		<mkdir dir="mac_build/classes" />
		<javac srcdir="mac_src" destdir="mac_build/classes" source="1.5"
			classpath="${JSESHCLASSES}:${basedir}/lib/quaqua.jar:${basedir}/lib/AppleJavaExtensions.jar" />
		<jar jarfile="dist/macSpecific.jar" excludes="**/CVS/**">
			<fileset dir="${basedir}/mac_build/classes">
			</fileset>
		</jar>
	</target>

	<target name="glyphs-jar" depends="jsesh-compile" description="--> build glyph library">
		<description>
			Library containing the extended glyphs. Separate from the main JSesh lib.
		</description>
		<echo>Preparing resources</echo>
		<java classname="jsesh.hieroglyphs.ResourcesHieroglyphicFontManager">
			<arg value="${basedir}/resources/glyphs" />
			<classpath path="${JSESHCLASSES}">
			</classpath>
		</java>

		<echo>copying SVGs</echo>
		<copy todir="dist/jseshGlyphs" flatten="true" overwrite="true"
			includeemptydirs="false">
			<fileset dir="resources">
				<include name="glyphs/**/*.svg" />
				<include name="glyphs/*" />
			</fileset>
		</copy>

		<echo>building jar</echo>
		<jar jarfile="dist/jseshGlyphs.jar" excludes="**/CVS/**">
			<fileset dir="dist">
				<include name="jseshGlyphs/**" />
			</fileset>
		</jar>
		<echo>jar built</echo>

	</target>


	<target name="distclean" description="Delete everything which can be regenerated.">

		<!-- emacs backups -->
		<delete>
			<fileset dir="." defaultexcludes="no" includes="**/*~" />
		</delete>
		<!-- generated directories -->
		<delete dir="build/classes" />
		<delete dir="depcache" />
		<delete dir="dist" />
		<delete dir="installer-distribution" />
		<delete dir="macdist" />
		<delete dir="mac_build" />
		<delete dir="reports" />
		<delete dir="utilityLib" />
		<!-- java generated files -->
		<delete file="src/jsesh/Version.java" />
		<delete file="src/jsesh/mdc/lex/MDCLexAux.java" />
		<delete file="src/jsesh/mdc/lex/MDCSymbols.java" />
		<delete file="src/jsesh/mdc/parser/MDCParse.java" />
		<delete file="${docdir}/jseshDoc.xml" />
		<delete file="${docdir}/jseshDoc.pdf" />
		<delete file="extLib/cupruntime.jar" />
		<!-- Various files (in particular, files created when testing jsesh -->
		<delete>
			<fileset dir=".">
				<include name="hs_err*" />
				<include name="DemoDrawer.png" />
				<include name="test.*" />
				<include name="LisezMoiCD.html" />
			</fileset>
		</delete>
	</target>

	<!-- Source distribution -->
	<target name="jarSource" depends=""
		description="--> Source distribution of JSesh">
		<description>
			Build a source distribution of JSesh.
        </description>
		<mkdir dir="${installer-dist}" />
		<jar destfile="${installer-dist}/JseshSources-${JSESHVERSION}.jar"
			basedir="..">
			<include name="JSesh/lib/**" />
			<include name="JSesh/resources/**" />
			<include name="JSesh/src/**" />
			<include name="JSesh/utilitySource/**" />
			<include name="JSesh/buildJSesh.xml" />
			<include name="JSesh/.classpath" />
			<include name="JSesh/.project" />
			<include name="JSesh/.cvsignore" />
			<include name="JSesh/nbproject" />
			<include name="JSesh/README.txt" />
			<include name="JSesh/INSTALL.txt" />
			<include name="JSesh/doc/**" />
			<exclude name="JSesh/oldCode/**" />
			<exclude name="JSesh/userdoc/jseshDoc.pdf" />
			<exclude name="JSesh/userdoc/jseshDoc.xml" />
		</jar>
	</target>

	<!-- Installer related stuff -->
	<!--
		================================= target: installer
		=================================
	-->
	<target name="installer" depends="-build-installer" description="--> description">

	</target>


	<property name="installer-dist" value="${basedir}/installer-distribution" />

<!-- 		depends="jsesh-jar,glyphs-jar,jseshHtmlDoc-jar,copyStub.jar,mac,PDFDocumentation,rtfCleaner"> -->

        <target name="toto" depends="-build-installer"></target>
	<target name="-build-installer"
		>
		<description>
			Build an Installer for JSesh, using the great IzPack utility
			http://www.izforge.com/izpack/
			We use version 3.7.1
        </description>
		<!-- Allows us to use the IzPack Ant task -->
		<taskdef name="izpack" classpath="${IZPACK}/lib/compiler.jar:lib/xercesImpl.jar"
			classname="com.izforge.izpack.ant.IzPackTask" />
		<echo message="Copying install.xml" />
		<!-- copy the install file, with the correct version number. -->
		<copy file="resources/templates/install_template.xml" tofile="${installer-dist}/install.xml"
			overwrite="true">
			<filterset refid="versionfilter" />
		</copy>

		<!-- We call IzPack -->
		<echo message="Makes the installer using IzPack" />
		<izpack input="${installer-dist}/install.xml"
			output="${installer-dist}/JSesh-install-${JSESHVERSION}.jar" basedir="${installer-dist}"
			izPackDir="${IZPACK}"
			/>
		<!--			   installerType="standard-kunststoff"  -->
	</target>

	<target name="mac" depends="jsesh-jar,mac-jar">
		<description>
			This target creates a file hierarchy suitable for a macintosh
			application.
			The jar files which should go in it will be moved during installation,
			by the jseshInstall.CopyStub java class which is called by IzPack
			installer
			http://www.loomcom.com/jarbundler/
			we use version 1.3
        </description>
		<taskdef name="jarbundler" classpath="${JARBUNDLER}:lib/xercesImpl.jar"
			classname="net.sourceforge.jarbundler.JarBundler" />

		<delete dir="macdist" />
		<mkdir dir="macdist" />
		<jarbundler dir="macdist" name="JSesh"
			mainclass="jsesh.macSpecific.JSeshMacApplication" verbose="true"
			antialiasedgraphics="true" antialiasedtext="true" growbox="true"
			stubfile="resources/installer/JavaApplicationStub" screenmenu="false"
			icon="resources/images/hibou.icns" version="${JSESHVERSION}"
			signature="JSES" jvmversion="1.5+" developmentregion="French"
			vmoptions="-Xmx128m">
			<!--
				If you get a java.lang.NoClassDefFoundError:
				org/apache/xml/serialize/OutputFormat error here in eclipse, it's
				because jarbundler uses xerces, which is not included in eclipse
				internal version of ant. Either use ant from the command line, or
				add xercesImpl.jar and xml-apis.jar to eclipse ant classpath. (it's
				done in the general eclipse preferences)
			-->
			<javaproperty name="apple.awt.graphics.UseQuartz" value="true" />
			<javaproperty name="jsesh.mdcDisplayer.swing.editor.JMDCEditor.level"
				value="FINE" />

			<jarfileset dir="lib" includes="*.jar">

			</jarfileset>
			<jarfileset dir="dist" includes="*.jar">
			</jarfileset>

			<documenttype name="Manuel de Codage File" extensions="gly hie GLY HIE"
				iconfile="resources/images/canard.icns" role="Editor" />
		</jarbundler>
		<!--
			We delete the jar files, as we only need the skeleton of a mac
			application. The true jar files are those distributed with the
			project.
		-->
		<delete>
			<fileset dir="macdist/JSesh.app/Contents/Resources/Java">
				<include name="*.jar" />
			</fileset>
		</delete>
	</target>

	<target name="copyStub.jar" depends="-jsesh-init">
		<description>
			Build the "copyStub" library, used by the installer to :
			* test if we are on a macintosh
			* if it's the case
			* copy the Stub binary file available on macs in the application
			directory
			* move the application jar files in the application directory
			* if not, delete the mac hierarchy in the project.
        </description>
		<javac srcdir="resources/installer/copyStub" source="1.5" />
		<jar jarfile="${installer-dist}/copyStub.jar" basedir="resources/installer/copyStub"
			excludes="*.java">
		</jar>
		<delete>
			<fileset dir="resources/installer/copyStub">
				<include name="**/*.class" />
			</fileset>
		</delete>
	</target>

	<!-- To solve problems with VISTA !!!!!! -->
	<!--
		================================= target: descriptionEditorJar
		=================================
	-->
	<target name="descriptionEditorJar" depends="jsesh-jar"
		description="--> jar to solve problems with vista">

		<jar destfile="dist/signInfoEditor.jar">
			<manifest>
				<attribute name="Main-Class"
					value="jsesh.signInfoEditor.ui.SignInfoEditorApplication" />
				<attribute name="Class-Path" value="jsesh.jar" />
			</manifest>
			<fileset dir="build/classes">
				<exclude name="**/*" />
				<include name="META-INF/*" />
			</fileset>
		</jar>

	</target>

	<!--
		================================= target: javadoc
		=================================
	-->
	<target name="javadoc" depends="-jsesh-init" description="description">
		<javadoc sourcepath="src" destdir="${basedir}/build/javadoc">
		</javadoc>
	</target>

</project>
